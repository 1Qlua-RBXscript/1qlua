local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- Настройки
local AIM_SETTINGS = {
    Hotkey = Enum.KeyCode.E,
    TeamCheck = true,
    MaxDistance = 1000,
    ClickButton = 1,
    FOV = 10000,
    AutoShoot = true,
    CheckWalls = true,
    HeadshotChance = 0.25,
    BodyShotChance = 0.75,
    IgnoreGhosts = true,
    IgnoreForceField = true
}

local localPlayer = Players.LocalPlayer
local camera = Workspace.CurrentCamera

-- Упрощенная функция для проверки призрака/щита
local function isPlayerGhost(player)
    if not player or not player.Character then return false end
    
    local character = player.Character
    
    -- Только проверка на ForceField (щит) - это самый надежный признак
    if AIM_SETTINGS.IgnoreForceField then
        local forceField = character:FindFirstChildOfClass("ForceField")
        if forceField then
            return true
        end
    end
    
    -- Проверка на прозрачность (дополнительная проверка)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        -- Если здоровье 0 - игрок мертв
        if humanoid.Health <= 0 then
            return true
        end
        
        -- Проверка специальных атрибутов (если есть)
        if humanoid:GetAttribute("IsGhost") == true then
            return true
        end
    end
    
    return false
end

-- Функция для проверки видимости через Raycast
local function isVisible(targetPart)
    if not AIM_SETTINGS.CheckWalls then return true end
    
    local character = localPlayer.Character
    if not character then return false end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return false end
    
    local origin = humanoidRootPart.Position
    local direction = (targetPart.Position - origin).Unit
    local distance = (targetPart.Position - origin).Magnitude
    
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {character, targetPart.Parent}
    
    local raycastResult = Workspace:Raycast(origin, direction * distance, raycastParams)
    
    return raycastResult == nil
end

-- Функция для получения позиции цели (голова или тело)
local function getTargetPosition(player)
    if not player or not player.Character then return nil end
    
    -- Проверка на призрака (только если включено)
    if AIM_SETTINGS.IgnoreGhosts and isPlayerGhost(player) then
        return nil
    end
    
    local character = player.Character
    
    -- 25% шанс выстрела в голову, 75% в тело
    local randomValue = math.random()
    
    if randomValue <= AIM_SETTINGS.HeadshotChance then
        -- Стрельба в голову
        local head = character:FindFirstChild("Head")
        if head and isVisible(head) then
            return head.Position
        end
    end
    
    -- Стрельба в тело (по умолчанию или если голова не видна)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
    
    if humanoidRootPart and isVisible(humanoidRootPart) then
        return humanoidRootPart.Position
    elseif torso and isVisible(torso) then
        return torso.Position
    end
    
    return nil
end

-- Функция для получения позиции игрока на экране
local function getPlayerScreenPosition(player)
    if not player or not player.Character then return nil end
    
    local targetPosition = getTargetPosition(player)
    if not targetPosition then return nil end
    
    local screenPosition, visible = camera:WorldToViewportPoint(targetPosition)
    
    if visible then
        return Vector2.new(screenPosition.X, screenPosition.Y)
    end
    
    return nil
end

-- Функция для получения точной позиции мыши
local function getMousePosition()
    return UserInputService:GetMouseLocation()
end

-- Функция для проверки, находится ли игрок в FOV
local function isInFOV(screenPosition)
    if not screenPosition then return false end
    
    local mousePos = getMousePosition()
    local distance = (screenPosition - mousePos).Magnitude
    
    return distance <= AIM_SETTINGS.FOV
end

-- Функция для получения ближайшего видимого игрока в FOV
local function getNearestPlayerInFOV()
    if not localPlayer or not localPlayer.Character then 
        print("Локальный игрок не найден")
        return nil 
    end
    
    local localHumanoidRootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not localHumanoidRootPart then 
        print("HumanoidRootPart не найден")
        return nil 
    end
    
    local mousePos = getMousePosition()
    local localPosition = localHumanoidRootPart.Position
    local nearestPlayer = nil
    local nearestDistance = math.huge
    local nearestFOVDistance = math.huge
    
    local foundPlayers = 0
    
    for _, player in pairs(Players:GetPlayers()) do
        if player == localPlayer then continue end
        
        local character = player.Character
        if not character then 
            -- print("Игрок " .. player.Name .. " не имеет персонажа")
            continue 
        end
        
        -- Проверка команды
        if AIM_SETTINGS.TeamCheck and player.Team and localPlayer.Team and player.Team == localPlayer.Team then
            -- print("Игнорируем игрока своей команды: " .. player.Name)
            continue
        end
        
        -- Проверка на живого игрока
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if not humanoid or humanoid.Health <= 0 then
            -- print("Игрок " .. player.Name .. " мертв")
            continue
        end
        
        -- Проверка на призрака/щит
        if AIM_SETTINGS.IgnoreGhosts and isPlayerGhost(player) then
            -- print("Игрок " .. player.Name .. " в режиме призрака")
            continue
        end
        
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then 
            -- print("Игрок " .. player.Name .. " не имеет HumanoidRootPart")
            continue 
        end
        
        local distance = (humanoidRootPart.Position - localPosition).Magnitude
        if distance > AIM_SETTINGS.MaxDistance then
            -- print("Игрок " .. player.Name .. " слишком далеко: " .. distance)
            continue
        end
        
        -- Проверка видимости
        local targetPos = getTargetPosition(player)
        if not targetPos then
            -- print("Игрок " .. player.Name .. " не видим")
            continue
        end
        
        local screenPosition = getPlayerScreenPosition(player)
        if screenPosition and isInFOV(screenPosition) then
            local fovDistance = (mousePos - screenPosition).Magnitude
            if fovDistance < nearestFOVDistance then
                nearestFOVDistance = fovDistance
                nearestPlayer = player
                nearestDistance = distance
                foundPlayers = foundPlayers + 1
            end
        else
            -- print("Игрок " .. player.Name .. " не в FOV")
        end
    end
    
    if nearestPlayer then
        print("Найден игрок для стрельбы: " .. nearestPlayer.Name .. ", расстояние: " .. math.floor(nearestDistance))
    else
        print("Не найдено подходящих игроков для стрельбы")
    end
    
    return nearestPlayer, nearestDistance
end

-- Функция для клика по позиции
local function clickAtPosition(position)
    if not position then return false end
    
    VirtualInputManager:SendMouseMoveEvent(
        position.X,
        position.Y,
        game:GetService("CoreGui")
    )
    
    if AIM_SETTINGS.ClickButton == 1 then
        VirtualInputManager:SendMouseButtonEvent(
            position.X, position.Y, 0, true, nil, 0
        )
        task.wait(0.05)
        VirtualInputManager:SendMouseButtonEvent(
            position.X, position.Y, 0, false, nil, 0
        )
    else
        VirtualInputManager:SendMouseButtonEvent(
            position.X, position.Y, 1, true, nil, 0
        )
        task.wait(0.05)
        VirtualInputManager:SendMouseButtonEvent(
            position.X, position.Y, 1, false, nil, 0
        )
    end
    
    return true
end

-- Основная функция для стрельбы по ближайшему игроку
local function shootNearestPlayer()
    local nearestPlayer = getNearestPlayerInFOV()
    if not nearestPlayer then
        print("Нет подходящих игроков для стрельбы")
        return false
    end
    
    -- Дополнительная проверка на призрака перед выстрелом
    if AIM_SETTINGS.IgnoreGhosts and isPlayerGhost(nearestPlayer) then
        print("Игнорируем игрока в режиме призрака: " .. nearestPlayer.Name)
        return false
    end
    
    local screenPosition = getPlayerScreenPosition(nearestPlayer)
    if not screenPosition then
        print("Не удалось получить позицию на экране для: " .. nearestPlayer.Name)
        return false
    end
    
    print("Стреляем в: " .. nearestPlayer.Name)
    return clickAtPosition(screenPosition)
end

-- Автоматическая стрельба
local autoShootConnection
local function toggleAutoShoot()
    if AIM_SETTINGS.AutoShoot then
        if autoShootConnection then
            autoShootConnection:Disconnect()
            autoShootConnection = nil
            print("AutoShoot: OFF")
        else
            autoShootConnection = RunService.Heartbeat:Connect(function()
                local target = getNearestPlayerInFOV()
                if target then
                    if not (AIM_SETTINGS.IgnoreGhosts and isPlayerGhost(target)) then
                        shootNearestPlayer()
                    end
                end
            end)
            print("AutoShoot: ON")
        end
    end
end

-- Обработчик нажатия клавиши
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == AIM_SETTINGS.Hotkey then
        if AIM_SETTINGS.AutoShoot then
            toggleAutoShoot()
        else
            shootNearestPlayer()
        end
    end
end)

-- Функции для глобального доступа
getgenv().SHOOT_NEAREST = shootNearestPlayer
getgenv().TOGGLE_AUTO_SHOOT = toggleAutoShoot
getgenv().GET_NEAREST_PLAYER = getNearestPlayerInFOV
getgenv().IS_PLAYER_GHOST = isPlayerGhost

-- Функция для настройки
getgenv().SETUP_AIM_SHOOT = function(settings)
    if settings.Hotkey then AIM_SETTINGS.Hotkey = settings.Hotkey end
    if settings.TeamCheck ~= nil then AIM_SETTINGS.TeamCheck = settings.TeamCheck end
    if settings.MaxDistance then AIM_SETTINGS.MaxDistance = settings.MaxDistance end
    if settings.ClickButton then AIM_SETTINGS.ClickButton = settings.ClickButton end
    if settings.FOV then AIM_SETTINGS.FOV = settings.FOV end
    if settings.AutoShoot ~= nil then AIM_SETTINGS.AutoShoot = settings.AutoShoot end
    if settings.CheckWalls ~= nil then AIM_SETTINGS.CheckWalls = settings.CheckWalls end
    if settings.HeadshotChance then AIM_SETTINGS.HeadshotChance = settings.HeadshotChance end
    if settings.BodyShotChance then AIM_SETTINGS.BodyShotChance = settings.BodyShotChance end
    if settings.IgnoreGhosts ~= nil then AIM_SETTINGS.IgnoreGhosts = settings.IgnoreGhosts end
    if settings.IgnoreForceField ~= nil then AIM_SETTINGS.IgnoreForceField = settings.IgnoreForceField end
    
    print("Настройки обновлены!")
    print("IgnoreGhosts: " .. tostring(AIM_SETTINGS.IgnoreGhosts))
    print("IgnoreForceField: " .. tostring(AIM_SETTINGS.IgnoreForceField))
end

-- Функция для временного отключения проверки призраков
getgenv().DISABLE_GHOST_CHECK = function()
    local oldSetting = AIM_SETTINGS.IgnoreGhosts
    AIM_SETTINGS.IgnoreGhosts = false
    print("Проверка призраков отключена")
    return oldSetting
end

getgenv().ENABLE_GHOST_CHECK = function()
    AIM_SETTINGS.IgnoreGhosts = true
    print("Проверка призраков включена")
end

print("Aim Shoot Script loaded!")
print("Press " .. tostring(AIM_SETTINGS.Hotkey) .. " to " .. (AIM_SETTINGS.AutoShoot and "toggle auto shoot" or "shoot nearest player"))
print("Headshot chance: " .. (AIM_SETTINGS.HeadshotChance * 100) .. "%")
print("Ignore ghosts: " .. tostring(AIM_SETTINGS.IgnoreGhosts))
print("Ignore force fields: " .. tostring(AIM_SETTINGS.IgnoreForceField))
print("Для отладки используйте: DISABLE_GHOST_CHECK() и ENABLE_GHOST_CHECK()")
