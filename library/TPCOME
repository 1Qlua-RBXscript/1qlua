local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Настройки по умолчанию
local TP_SETTINGS = {
    ForwardOffset = 0,   -- Смещение вперед/назад (Z)
    RightOffset = 0,     -- Смещение вправо/влево (X)
    UpOffset = 0,        -- Смещение вверх/вниз (Y)
    Yaw = 0,             -- Поворот влево/вправо (оси Y, градусы)
    Pitch = 0,           -- Поворот вверх/вниз (оси X, градусы)
    Roll = 0             -- Наклон (оси Z, градусы)
}

-- Обновляемые ссылки на персонажа
local Character
local HumanoidRootPart

-- Функция обновления ссылок
local function UpdateCharacter()
    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    
    LocalPlayer.CharacterAdded:Connect(function(newChar)
        Character = newChar
        HumanoidRootPart = newChar:WaitForChild("HumanoidRootPart")
    end)
end

UpdateCharacter()

-- Функция для безопасного получения объекта
local function findObject(objectPath)
    local success, target = pcall(function()
        local fixedPath = objectPath:gsub('game:GetService%("', 'game:GetService(\'')
                          :gsub('")', '\')')
        return loadstring("return " .. fixedPath)()
    end)
    return if success then target else nil
end

-- Настройка параметров телепортации
getgenv().TP_SETTINGS = function(settings)
    if settings.ForwardOffset then TP_SETTINGS.ForwardOffset = settings.ForwardOffset end
    if settings.RightOffset then TP_SETTINGS.RightOffset = settings.RightOffset end
    if settings.UpOffset then TP_SETTINGS.UpOffset = settings.UpOffset end
    if settings.Yaw then TP_SETTINGS.Yaw = math.rad(settings.Yaw) end
    if settings.Pitch then TP_SETTINGS.Pitch = math.rad(settings.Pitch) end
    if settings.Roll then TP_SETTINGS.Roll = math.rad(settings.Roll) end
    
    print("✅ Настройки обновлены:")
    print(string.format("Смещение: X=%.1f, Y=%.1f, Z=%.1f", 
        TP_SETTINGS.RightOffset, TP_SETTINGS.UpOffset, TP_SETTINGS.ForwardOffset))
    print(string.format("Поворот: Yaw=%.1f°, Pitch=%.1f°, Roll=%.1f°", 
        math.deg(TP_SETTINGS.Yaw), math.deg(TP_SETTINGS.Pitch), math.deg(TP_SETTINGS.Roll)))
end

-- Основная функция телепортации
getgenv().TPCOME = function(objectPath)
    -- Обновляем ссылки
    if not Character or not HumanoidRootPart or not Character.Parent then
        UpdateCharacter()
    end

    -- Получаем объект
    local target = findObject(objectPath)
    if not target then
        warn("❌ Объект не найден: " .. objectPath)
        return false
    end

    -- Создаем CFrame с учетом всех настроек
    local offset = Vector3.new(
        TP_SETTINGS.RightOffset,
        TP_SETTINGS.UpOffset,
        -TP_SETTINGS.ForwardOffset
    )
    
    local rotation = CFrame.Angles(
        TP_SETTINGS.Pitch,  -- Вверх/вниз
        TP_SETTINGS.Yaw,    -- Влево/вправо
        TP_SETTINGS.Roll    -- Наклон
    )
    
    local targetCFrame = HumanoidRootPart.CFrame * CFrame.new(offset) * rotation

    -- Применяем к объекту
    if target:IsA("BasePart") then
        target.CFrame = targetCFrame
    elseif target:IsA("Model") then
        local primary = target.PrimaryPart or target:FindFirstChildWhichIsA("BasePart")
        if primary then
            target:SetPrimaryPartCFrame(targetCFrame)
        else
            warn("❌ У модели нет частей для телепортации")
            return false
        end
    else
        warn("❌ Можно телепортировать только BasePart или Model")
        return false
    end

    print("✅ Объект "..target.Name.." телепортирован с текущими настройками")
    return true
end
