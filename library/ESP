local ESP = {
    Active = {},
    Connections = {},
    Settings = {
        Color = Color3.fromRGB(0, 255, 0),
        Transparency = 0.5,
        SizeOffset = Vector3.new(0.1, 0.1, 0.1)
    }
}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
local function GetTarget(targetPath)
    local success, target = pcall(function()
        -- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
        local fixedPath = targetPath:gsub('(%b[])', function(match)
            return '[' .. match:sub(2, -2):gsub('["%[]', '\\%0') .. ']'
        end)
        return loadstring("return " .. fixedPath)()
    end)
    return success and target or nil
end

-- –°–æ–∑–¥–∞–Ω–∏–µ ESP –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
local function CreateESP(target)
    if not target then return end
    
    if target:IsA("BasePart") then
        -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if ESP.Active[target] then
            ESP.Active[target]:Destroy()
        end
        
        -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
        local box = Instance.new("BoxHandleAdornment")
        box.Name = "ESP_" .. target:GetFullName()
        box.Adornee = target
        box.AlwaysOnTop = true
        box.ZIndex = 10
        box.Size = target.Size + ESP.Settings.SizeOffset
        box.Transparency = ESP.Settings.Transparency
        box.Color3 = ESP.Settings.Color
        box.Parent = target
        
        ESP.Active[target] = box
        return true
    elseif target:IsA("Model") then
        -- –î–ª—è –º–æ–¥–µ–ª–µ–π –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        local success = false
        for _, part in ipairs(target:GetDescendants()) do
            if part:IsA("BasePart") then
                CreateESP(part)
                success = true
            end
        end
        return success
    end
    return false
end

-- –£–¥–∞–ª–µ–Ω–∏–µ ESP
local function RemoveESP(target)
    if not target then return false end
    
    if target:IsA("BasePart") then
        if ESP.Active[target] then
            ESP.Active[target]:Destroy()
            ESP.Active[target] = nil
            return true
        end
    elseif target:IsA("Model") then
        -- –î–ª—è –º–æ–¥–µ–ª–µ–π —É–¥–∞–ª—è–µ–º –≤—Å–µ ESP
        local success = false
        for _, part in ipairs(target:GetDescendants()) do
            if part:IsA("BasePart") and ESP.Active[part] then
                ESP.Active[part]:Destroy()
                ESP.Active[part] = nil
                success = true
            end
        end
        return success
    end
    return false
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ESP
getgenv().ESP = function(targetPath)
    -- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞
    local target = GetTarget(targetPath)
    
    if not target then
        -- –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
        local found = false
        for _, part in ipairs(workspace:GetDescendants()) do
            if part:IsA("BasePart") and part.Name:lower() == targetPath:lower() then
                CreateESP(part)
                found = true
            end
        end
        
        if not found then
            warn("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " .. targetPath)
            return false
        end
    else
        if not CreateESP(target) then
            warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ESP –¥–ª—è: " .. targetPath)
            return false
        end
    end
    
    -- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    if not ESP.Connections[targetPath] then
        ESP.Connections[targetPath] = workspace.DescendantAdded:Connect(function(descendant)
            if descendant:IsA("BasePart") and descendant.Name:lower() == targetPath:lower() then
                CreateESP(descendant)
            end
        end)
    end
    
    print("‚úÖ ESP —Å–æ–∑–¥–∞–Ω –¥–ª—è: " .. targetPath)
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è ESP
getgenv().UNESP = function(targetPath)
    -- –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç
    local target = GetTarget(targetPath)
    
    if target then
        if RemoveESP(target) then
            print("‚úÖ ESP —É–¥–∞–ª–µ–Ω –¥–ª—è: " .. targetPath)
            return true
        end
    else
        -- –£–¥–∞–ª—è–µ–º –≤—Å–µ ESP —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        local found = false
        for part, _ in pairs(ESP.Active) do
            if part.Name:lower() == targetPath:lower() then
                RemoveESP(part)
                found = true
            end
        end
        
        if not found then
            warn("‚ùå ESP –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: " .. targetPath)
            return false
        end
    end
    
    -- –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if ESP.Connections[targetPath] then
        ESP.Connections[targetPath]:Disconnect()
        ESP.Connections[targetPath] = nil
    end
    
    print("‚úÖ ESP –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è: " .. targetPath)
    return true
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ESP
getgenv().ESP_SETTINGS = function(settings)
    if settings.Color then
        ESP.Settings.Color = settings.Color
    end
    if settings.Transparency then
        ESP.Settings.Transparency = settings.Transparency
    end
    if settings.SizeOffset then
        ESP.Settings.SizeOffset = settings.SizeOffset
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ESP
    for _, box in pairs(ESP.Active) do
        box.Color3 = ESP.Settings.Color
        box.Transparency = ESP.Settings.Transparency
        if box.Adornee then
            box.Size = box.Adornee.Size + ESP.Settings.SizeOffset
        end
    end
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ESP –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
end

print("üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π ESP –≥–æ—Ç–æ–≤!")
print("ESP(\"workspace.Car\") - –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –æ–±—ä–µ–∫—Ç")
print("ESP(\"workspace:GetChildren()[58]\") - –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É")
print("ESP(\"workspace['Around Lightning']\") - –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏")
print("UNESP(\"–ø—É—Ç—å\") - —É–±—Ä–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É")
print("ESP_SETTINGS({Color=Color3.new(1,0,0)}) - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π")
