local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ—Ç–∞
local FLY_SETTINGS = {
    Speed = 25,
    HeightOffset = 0,
    RefreshDelay = 1,
    ReachDistance = 1,
    LookAtTarget = true
}

-- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
local flying = false
local currentTask = nil
local visitedObjects = {}
local currentTarget = nil
local connection = nil

-- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
local function isValidObject(obj)
    return obj and obj.Parent ~= nil
end

-- –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
local function getValidObjects(objectName)
    local validObjects = {}
    local char = LocalPlayer.Character
    local root = char and char:FindFirstChild("HumanoidRootPart")
    
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj.Name == objectName and isValidObject(obj) and not visitedObjects[obj] then
            if obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart) then
                local pos = obj:IsA("BasePart") and obj.Position or obj.PrimaryPart.Position
                local dist = root and (pos - root.Position).Magnitude or math.huge
                
                table.insert(validObjects, {
                    object = obj,
                    distance = dist
                })
            end
        end
    end
    
    table.sort(validObjects, function(a, b)
        return a.distance < b.distance
    end)
    
    return validObjects
end

-- –ü–ª–∞–≤–Ω—ã–π –ø–æ–ª–µ—Ç –∫ –æ–±—ä–µ–∫—Ç—É
local function flyToTarget(target)
    local char = LocalPlayer.Character
    if not char or not isValidObject(target) then return false end
    
    local root = char:FindFirstChild("HumanoidRootPart")
    if not root then return false end
    
    local targetPos = target:IsA("BasePart") and target.Position or target.PrimaryPart.Position
    targetPos += Vector3.new(0, FLY_SETTINGS.HeightOffset, 0)
    
    local startPos = root.Position
    local startTime = os.clock()
    local distance = (targetPos - startPos).Magnitude
    local duration = distance / FLY_SETTINGS.Speed
    
    while flying and isValidObject(target) do
        local elapsed = os.clock() - startTime
        if elapsed >= duration then break end
        
        local alpha = elapsed / duration
        local newPos = startPos:Lerp(targetPos, alpha)
        
        if FLY_SETTINGS.LookAtTarget then
            root.CFrame = CFrame.new(newPos, targetPos)
        else
            root.CFrame = CFrame.new(newPos)
        end
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (root.Position - targetPos).Magnitude < FLY_SETTINGS.ReachDistance then
            visitedObjects[target] = true
            return true
        end
        
        RunService.Heartbeat:Wait()
    end
    
    return false
end

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª–µ—Ç–∞
local function flightLoop(objectName)
    while flying do
        local objects = getValidObjects(objectName)
        
        if #objects == 0 then
            print("‚è≥ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ...")
            task.wait(FLY_SETTINGS.RefreshDelay)
        else
            currentTarget = objects[1].object
            
            if flyToTarget(currentTarget) then
                print("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç:", currentTarget:GetFullName())
            else
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å –æ–±—ä–µ–∫—Ç–∞")
            end
            
            task.wait(0.2)
        end
    end
end

-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
local function trackObjects(objectName)
    if connection then
        connection:Disconnect()
    end
    
    connection = Workspace.DescendantAdded:Connect(function(obj)
        if flying and obj.Name == objectName and isValidObject(obj) then
            print("üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç:", obj:GetFullName())
        end
    end)
end

-- –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ–ª–µ—Ç–∞
getgenv().FLYTOAUTO = function(objectName)
    if not objectName or type(objectName) ~= "string" then
        warn("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: FLYTOAUTO(\"–Ω–∞–∑–≤–∞–Ω–∏–µ\")")
        return
    end
    
    -- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–µ—Ç–∞
    UNFLYTOAUTO()
    
    -- –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    flying = true
    visitedObjects = {}
    currentTarget = nil
    
    -- –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    if FLY_SETTINGS.RefreshDelay > 0 then
        trackObjects(objectName)
    end
    
    -- –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    currentTask = task.spawn(function()
        flightLoop(objectName)
    end)
    
    print("üõ´ –ê–≤—Ç–æ–ø–æ–ª–µ—Ç –∑–∞–ø—É—â–µ–Ω –∫ –æ–±—ä–µ–∫—Ç–∞–º:", objectName)
end

-- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ–ª–µ—Ç–∞
getgenv().UNFLYTOAUTO = function()
    flying = false
    
    if currentTask then
        task.cancel(currentTask)
        currentTask = nil
    end
    
    if connection then
        connection:Disconnect()
        connection = nil
    end
    
    currentTarget = nil
    print("üõë –ê–≤—Ç–æ–ø–æ–ª–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
getgenv().FLYTO_SETTINGS = function(settings)
    if settings.Speed then FLY_SETTINGS.Speed = settings.Speed end
    if settings.HeightOffset then FLY_SETTINGS.HeightOffset = settings.HeightOffset end
    if settings.RefreshDelay then FLY_SETTINGS.RefreshDelay = settings.RefreshDelay end
    if settings.ReachDistance then FLY_SETTINGS.ReachDistance = settings.ReachDistance end
    if settings.LookAtTarget ~= nil then FLY_SETTINGS.LookAtTarget = settings.LookAtTarget end
    
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:")
    print("–°–∫–æ—Ä–æ—Å—Ç—å:", FLY_SETTINGS.Speed)
    print("–í—ã—Å–æ—Ç–∞:", FLY_SETTINGS.HeightOffset)
    print("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", FLY_SETTINGS.RefreshDelay)
end

print("üöÄ FLYTOAUTO —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!")
print("FLYTOAUTO(\"–Ω–∞–∑–≤–∞–Ω–∏–µ\") - –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ–ª–µ—Ç")
print("UNFLYTOAUTO() - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
print("FLYTO_SETTINGS({...}) - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
